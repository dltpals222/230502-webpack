/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./module/all_mighty_editor.js":
/*!*************************************!*\
  !*** ./module/all_mighty_editor.js ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n// ※callback, return 따로 언급이 없는 곳은 둘 다 있는 곳이다.\r\n//\r\n// 1. 제일 먼저 인식되는 것은 length이므로 2 이상일 경우 tagName으로 지정된 태그를 갯수대로 만듦(callback, return 없음)\r\n// 2. length는 기본값이 1이므로 빈칸으로 놓더라도 1로 설정됨\r\n// 3. id는 기본값으로 \"\"설정되어있다. (type은 string이다)\r\n// 4. id에 string 혹은 number 입력 -> 하나의 태그에 id의 값으로 저장된다.\r\n// 5. id에 배열을 입력 -> 배열이 1개인 경우 4번과 같은 동작을 한다.\r\n// 6. id에 배열을 입력 -> 배열이 2개 이상인 경우 loop로 동작되며 여기서는 callback과 return이 없다.\r\n// 7. id에 객체를 입력 -> 객체의 키가 속성(id, type 등과 같은)이 되며 하나의 태그에 여러개의 속성이 만들어진다.\r\n\r\nfunction multiAndSingleTagMaker(\r\n  parent,\r\n  tagName,\r\n  id = \"\",\r\n  length = 1,\r\n  callback\r\n) {\r\n  if (length === 1) {\r\n    //제일 먼저 length가 기본값이거나 1을 입력시 작동한다.\r\n    if (typeof id === \"string\" || typeof id === \"number\") {\r\n      // string 혹은 number입력시 작동\r\n\r\n      if (id === \"\") {\r\n        //\"\"입력해도 string으로 인식하여 따로 작성\r\n\r\n        //string -> id에 \"\"입력 시 a와 같은 작동\r\n        const element = document.createElement(tagName);\r\n        parent.appendChild(element);\r\n        if (callback) {\r\n          callback(element);\r\n        }\r\n        return element;\r\n      } else {\r\n        // \"\"이외 나머지 string 혹은 number시 작동\r\n\r\n        const element = document.createElement(tagName);\r\n        element.setAttribute(\"id\", id);\r\n        parent.appendChild(element);\r\n        if (callback) {\r\n          callback(element);\r\n        }\r\n        return element;\r\n      }\r\n      //string number 작동 끝\r\n    } else if (typeof id === \"object\") {\r\n      //object로 한번 걸러 준뒤에\r\n\r\n      if (Array.isArray(id)) {\r\n        // true이면 배열 아니면 객체\r\n\r\n        if (id.length === 1) {\r\n          //배열이 하나일때\r\n\r\n          const element = document.createElement(tagName);\r\n          element.setAttribute(\"id\", id[0]);\r\n          parent.appendChild(element);\r\n          if (callback) {\r\n            callback(element);\r\n          }\r\n          return element;\r\n        } else if (id.length > 1) {\r\n          // 배열이 두개 이상일때\r\n\r\n          id.map((mapElement) => {\r\n            const element = document.createElement(tagName);\r\n            element.setAttribute(\"id\", mapElement);\r\n            parent.appendChild(element);\r\n          });\r\n        } //배열 끝\r\n      } else {\r\n        //객체일때\r\n\r\n        const element = document.createElement(tagName);\r\n        for (let key in id) {\r\n          element.setAttribute(key, id[key]);\r\n        }\r\n        parent.appendChild(element);\r\n        if (callback) {\r\n          callback(element);\r\n        }\r\n        return element;\r\n      }\r\n    }\r\n  } else {\r\n    // 4.번 단순 for문\r\n    for (let i = 0; i < length; i++) {\r\n      const element = document.createElement(tagName);\r\n      parent.appendChild(element);\r\n    }\r\n  }\r\n}\r\n\r\n// 요소에 position 속성을 부여하는 함수\r\n// top, bottom, left, right는 object 아래의 변수의 값에 해당\r\n// 그러므로 top, bottom, left, right에 value를 부여하려면\r\n// 해당 변수들을 사용해야 한다.\r\n\r\nfunction positionEditor(element, position, zIndex, object, callback) {\r\n  const elementStyle = element.style;\r\n  elementStyle.position = position;\r\n  elementStyle.zIndex = zIndex;\r\n  if (typeof object === \"object\") {\r\n    for (let i in object) {\r\n      elementStyle[i] = object[i];\r\n    }\r\n  }\r\n  if (callback) {\r\n    callback(elementStyle);\r\n  }\r\n}\r\n\r\n//border 값을 \"1\"로주면 \"1px solid black\"\r\n// 원하는 폰트 바꾸고 싶을때 직접 객체를 만들 것\r\n// 객체 만드는 예시\r\n// ex)\r\n// const fontStyle = { fontSize: \"30px\", color: \"white\" };\r\n//함수 호출시 순서 (parent, 넓이, 높이, 외곽선, 배경, 폰트, 콜백)\r\n\r\nfunction fontAndLayoutEditor(\r\n  element,\r\n  width,\r\n  height,\r\n  border,\r\n  backgroundColor,\r\n  font,\r\n  callback\r\n) {\r\n  const parentStyle = element.style;\r\n  parentStyle.width = width;\r\n  parentStyle.height = height;\r\n  parentStyle.backgroundColor = backgroundColor;\r\n\r\n  if (border === \"1\") {\r\n    parentStyle.border = \"1px solid black\";\r\n  } else if (typeof border === \"string\") {\r\n    parentStyle.border = border;\r\n  }\r\n\r\n  if (typeof font === \"string\") {\r\n    parentStyle.fontSize = font;\r\n  } else if (typeof font === \"object\") {\r\n    for (let i in font) {\r\n      parentStyle[i] = font[i];\r\n    }\r\n  }\r\n\r\n  if (callback) {\r\n    callback(parentStyle);\r\n  }\r\n}\r\n\r\nfunction kingGodFlexEditor(\r\n  element,\r\n  flexDirection,\r\n  alignItems,\r\n  justifyContent,\r\n  callback\r\n) {\r\n  const t = element.style;\r\n  t.display = \"flex\";\r\n  t.flexDirection = flexDirection;\r\n  t.alignItems = alignItems;\r\n  t.justifyContent = justifyContent;\r\n  if (callback) {\r\n    callback(t);\r\n  }\r\n}\r\n\r\nfunction allMightyStyleEditor(element, object, callback) {\r\n  let elementStyle = element.style;\r\n  if (typeof object === \"object\") {\r\n    for (let i in object) {\r\n      elementStyle[i] = object[i];\r\n    }\r\n  }\r\n  if (callback) {\r\n    callback(element);\r\n  }\r\n}\r\n\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\r\n  multiAndSingleTagMaker,\r\n  positionEditor,\r\n  fontAndLayoutEditor,\r\n  kingGodFlexEditor,\r\n  allMightyStyleEditor,\r\n});\r\n\n\n//# sourceURL=webpack://05-01/./module/all_mighty_editor.js?");

/***/ }),

/***/ "./paging.js":
/*!*******************!*\
  !*** ./paging.js ***!
  \*******************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _module_all_mighty_editor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./module/all_mighty_editor.js */ \"./module/all_mighty_editor.js\");\n\r\n\r\nconst {\r\n  multiAndSingleTagMaker,\r\n  positionEditor,\r\n  fontAndLayoutEditor,\r\n  kingGodFlexEditor,\r\n  allMightyStyleEditor,\r\n} = _module_all_mighty_editor_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\r\n\r\nconst root = document.getElementById(\"root\");\r\nconst ids = {\r\n  mainList: [\"\", \"div\", \"board-list\"],\r\n  mainPage: [\"\", \"div\", \"number-list-wrap\"],\r\n  mainListChild: [\"\", \"div\", \"\", 5],\r\n  mainPageChild: {\r\n    first: [\"\", \"div\", \"page-down\"],\r\n    second: [\"\", \"div\", \"current-page\"],\r\n    third: [\"\", \"div\", \"page-up\"],\r\n  },\r\n  mainPageGrandChild: {\r\n    first: [\r\n      [\r\n        \"\",\r\n        \"a\",\r\n        { href: \"#\", id: \"start-number\" },\r\n        1,\r\n        (element) => {\r\n          element.innerText = \"<<맨앞\";\r\n          allMightyStyleEditor(element, aTagObject);\r\n          element.addEventListener(\"click\", () => {});\r\n        },\r\n      ],\r\n      [\r\n        \"\",\r\n        \"a\",\r\n        { href: \"#\", id: \"before-number\" },\r\n        1,\r\n        (element) => {\r\n          element.innerText = \"<이전\";\r\n          allMightyStyleEditor(element, aTagObject);\r\n        },\r\n      ],\r\n    ],\r\n    second: [\"\", \"a\", \"\", 1],\r\n    third: [\r\n      [\r\n        \"\",\r\n        \"a\",\r\n        { href: \"#\", id: \"next-number\" },\r\n        1,\r\n        (element) => {\r\n          element.innerText = \"다음>\";\r\n          allMightyStyleEditor(element, aTagObject);\r\n        },\r\n      ],\r\n      [\r\n        \"\",\r\n        \"a\",\r\n        { href: \"#\", id: \"end-number\" },\r\n        1,\r\n        (element) => {\r\n          element.innerText = \"맨뒤>>\";\r\n          allMightyStyleEditor(element, aTagObject);\r\n        },\r\n      ],\r\n    ],\r\n  },\r\n};\r\n\r\nconst aTagObject = {\r\n  \"text-decoration\": \"none\",\r\n  color: \"black\",\r\n  display: \"flex\",\r\n  justifyContent: \"center\",\r\n};\r\n// allMightyStyleEditor(element,aTagObject)\r\n\r\nconst numberStyle = [\"15px\", \"10px\", \"1\"];\r\nconst tagASet = { href: \"#\" };\r\n\r\n//게시글이 나타날 div\r\nconst boardList = multiAndSingleTagMaker(\r\n  root,\r\n  ids.mainList[1],\r\n  ids.mainList[2]\r\n);\r\n// //게시글 임시 div 추가\r\n// multiAndSingleTagMaker(\r\n//   boardList,\r\n//   ids.mainListChild[1],\r\n//   ids.mainListChild[2],\r\n//   ids.mainListChild[3],\r\n//   ids.mainListChild[4]\r\n// );\r\n\r\n//페이지네이션 최상위 div\r\nconst numberListWrap = multiAndSingleTagMaker(\r\n  root,\r\n  ids.mainPage[1],\r\n  ids.mainPage[2]\r\n);\r\n//이전 페이지 상위 div\r\nconst pageDown = multiAndSingleTagMaker(\r\n  numberListWrap,\r\n  ids.mainPageChild.first[1],\r\n  ids.mainPageChild.first[2]\r\n);\r\n//현재 페이지 나타내는 구간\r\nconst currentPage = multiAndSingleTagMaker(\r\n  numberListWrap,\r\n  ids.mainPageChild.second[1],\r\n  ids.mainPageChild.second[2]\r\n);\r\n//다음 페이지 상위 div\r\nconst pageUp = multiAndSingleTagMaker(\r\n  numberListWrap,\r\n  ids.mainPageChild.third[1],\r\n  ids.mainPageChild.third[2]\r\n);\r\n\r\n//맨앞 버튼\r\nconst startNumber = multiAndSingleTagMaker(\r\n  pageDown,\r\n  ids.mainPageGrandChild.first[0][1],\r\n  ids.mainPageGrandChild.first[0][2],\r\n  ids.mainPageGrandChild.first[0][3],\r\n  ids.mainPageGrandChild.first[0][4]\r\n);\r\n\r\n//이전 버튼\r\nconst beforeNumber = multiAndSingleTagMaker(\r\n  pageDown,\r\n  ids.mainPageGrandChild.first[1][1],\r\n  ids.mainPageGrandChild.first[1][2],\r\n  ids.mainPageGrandChild.first[1][3],\r\n  ids.mainPageGrandChild.first[1][4]\r\n);\r\n\r\n//다음 버튼\r\nconst nextNumber = multiAndSingleTagMaker(\r\n  pageUp,\r\n  ids.mainPageGrandChild.third[0][1],\r\n  ids.mainPageGrandChild.third[0][2],\r\n  ids.mainPageGrandChild.third[0][3],\r\n  ids.mainPageGrandChild.third[0][4]\r\n);\r\n\r\n//맨뒤 버튼\r\nconst endNumber = multiAndSingleTagMaker(\r\n  pageUp,\r\n  ids.mainPageGrandChild.third[1][1],\r\n  ids.mainPageGrandChild.third[1][2],\r\n  ids.mainPageGrandChild.third[1][3],\r\n  ids.mainPageGrandChild.third[1][4]\r\n);\r\n\r\n//css구간\r\nkingGodFlexEditor(root, \"column\", \"center\", \"center\");\r\nkingGodFlexEditor(boardList, \"column\", \"center\", \"center\");\r\nkingGodFlexEditor(numberListWrap, \"row\", \"center\", \"center\");\r\nfor (let i = 0; i < numberListWrap.children.length; i++) {\r\n  kingGodFlexEditor(numberListWrap.children[i], \"\", \"center\", \"space-evenly\");\r\n  fontAndLayoutEditor(\r\n    numberListWrap.children[i],\r\n    \"\",\r\n    \"\",\r\n    \"1\",\r\n    \"\",\r\n    \"\",\r\n    (element) => {\r\n      element.margin = \"2px\";\r\n    }\r\n  );\r\n}\r\n\r\nfontAndLayoutEditor(numberListWrap, \"100%\", \"3%\", \"1\");\r\nfontAndLayoutEditor(currentPage, \"40%\", \"\", \"1\");\r\nkingGodFlexEditor(currentPage, \"\", \"center\", \"space-evenly\");\r\n\r\nlet pagination = {\r\n  totalDoc: 151, //게시물 전체 갯수\r\n  onePageData: 4, //한페이지에 나타낼 데이터 수 (게시글 수)\r\n  currentPage: 21, //현재 페이지\r\n  onePageNumber: 5, //한 화면에 나타낼 페이지 수 (밑에 12345 숫자 누르는 버튼)\r\n};\r\n\r\n//총 페이지 수\r\nconst totalPage = Math.ceil(pagination.totalDoc / pagination.onePageData);\r\n\r\n//화면에 보여질 페이지 그룹\r\nconst aPageGroup = Math.ceil(pagination.currentPage / pagination.onePageNumber);\r\n\r\n//화면에 보여질 페이지 그룹 끝부분\r\nconst EndPageGroup = Math.ceil(totalPage / pagination.onePageNumber);\r\n\r\n// //화면에 그려질 첫번째 페이지\r\n// let displayOnePage = 0;\r\n// if (totalPage - (pagination.onePageNumber - 1) < 0) {\r\n//   displayOnePage = 1; //계산된 값이 0 이하면 첫번째 페이지\r\n// } else {\r\n//   displayOnePage = totalPage - (pagination.onePageNumber - 1);\r\n// }\r\n\r\n// //화면에 그려질 마지막 페이지\r\n// let displayUpOnePage = 0;\r\n// if (aPageGroup * pagination.onePageNumber > totalPage) {\r\n//   displayUpOnePage = totalPage; //계산된 값이 총페이지보다 많으면 마지막 페이지\r\n// } else {\r\n//   displayUpOnePage = aPageGroup * pagination.onePageNumber;\r\n// }\r\n\r\nfunction prevStartPageGroupDisplay(page) {\r\n  //맨앞, 이전 버튼 디스플레이\r\n  if (page === 1) {\r\n    startNumber.style.visibility = \"hidden\";\r\n    beforeNumber.style.visibility = \"hidden\";\r\n  } else {\r\n    startNumber.style.display = \"block\";\r\n    beforeNumber.style.display = \"block\";\r\n  }\r\n\r\n  //맨뒤, 다음 버튼 디스플레이\r\n  if (page === EndPageGroup) {\r\n    nextNumber.style.visibility = \"hidden\";\r\n    endNumber.style.visibility = \"hidden\";\r\n  } else {\r\n    nextNumber.style.display = \"block\";\r\n    endNumber.style.display = \"block\";\r\n  }\r\n}\r\n\r\n//맨앞 버튼 addEventListener\r\nfunction fourPageBtn(page) {\r\n  const pageDownChild = Array.from(pageDown.querySelectorAll(\"a\"));\r\n  let displayDownOnePage = page;\r\n  //이전 버튼\r\n  pageDownChild[1].addEventListener(\"click\", (event) => {\r\n    //a태그의 기본 동작을 막는다.\r\n    event.preventDefault();\r\n    //화면에 그려질 첫번째 페이지\r\n    if (page - (pagination.onePageNumber - 1) < 0) {\r\n      displayDownOnePage = 1; //계산된 값이 0 이하면 첫번째 페이지\r\n\r\n      currPageBtn(displayDownOnePage);\r\n    } else {\r\n      displayDownOnePage = page - pagination.onePageNumber;\r\n      currPageBtn(displayDownOnePage);\r\n    }\r\n  });\r\n\r\n  //맨앞 버튼\r\n  pageDownChild[0].addEventListener(\"click\", (event) => {\r\n    //a태그의 기본 동작을 막는다.\r\n    event.preventDefault();\r\n    currPageBtn(1);\r\n  });\r\n\r\n  //다음 버튼\r\n  const pageUpChild = Array.from(pageUp.querySelectorAll(\"a\"));\r\n  let displayUpOnePage = page;\r\n  pageUpChild[0].addEventListener(\"click\", (event) => {\r\n    //a태그의 기본 동작을 막는다.\r\n    event.preventDefault();\r\n\r\n    //화면에 그려질 마지막 페이지\r\n    if (page + pagination.onePageNumber > totalPage) {\r\n      displayUpOnePage = totalPage; //계산된 값이 총페이지보다 많으면 마지막 페이지\r\n      currPageBtn(displayUpOnePage);\r\n    } else {\r\n      displayUpOnePage = page + pagination.onePageNumber;\r\n      currPageBtn(displayUpOnePage);\r\n    }\r\n  });\r\n\r\n  pageUpChild[1].addEventListener(\"click\", (event) => {\r\n    //a태그의 기본 동작을 막는다.\r\n    event.preventDefault();\r\n    currPageBtn(totalPage);\r\n  });\r\n}\r\n\r\n//현재 페이지 버튼\r\nfunction currPageBtn(page) {\r\n  while (currentPage.hasChildNodes()) {\r\n    currentPage.removeChild(currentPage.firstChild);\r\n  }\r\n  renderContent(page);\r\n  for (let i = page; i <= page + pagination.onePageNumber - 1; i++) {\r\n    multiAndSingleTagMaker(\r\n      currentPage,\r\n      ids.mainPageGrandChild.second[1],\r\n      ids.mainPageGrandChild.second[2],\r\n      ids.mainPageGrandChild.second[3],\r\n      (element) => {\r\n        element.setAttribute(\"data-num\", i);\r\n        element.setAttribute(\"href\", `#`);\r\n        element.innerText = i;\r\n        element.style.width = \"20%\";\r\n        allMightyStyleEditor(element, aTagObject);\r\n        let elementNum = 0;\r\n\r\n        const currentChildA = Array.from(currentPage.querySelectorAll(\"a\"));\r\n        currentChildA.map((childElement) => {\r\n          childElement.addEventListener(\"click\", (event) => {\r\n            //페이지 클릭할 시 타켓 설정\r\n            const index = currentChildA.indexOf(event.target);\r\n            //페이지 숫자 클릭시 스타일 지정\r\n            currentChildA.forEach((paging, k) => {\r\n              paging.style.fontWeight = k === index ? \"bold\" : \"normal\";\r\n              paging.style.backgroundColor = k === index ? \"#9A6E44\" : \"\";\r\n              paging.style.color = k === index ? \"white\" : \"black\";\r\n              elementNum =\r\n                k === index ? parseInt(paging.dataset.num) : elementNum;\r\n            });\r\n            renderContent(elementNum);\r\n          }); // addEventListener 끝\r\n        }); // map 끝\r\n        //초기 첫번째 페이지 선택\r\n        if (i === page) {\r\n          element.style.fontWeight = \"bold\";\r\n          element.style.backgroundColor = \"#9A6E44\";\r\n          element.style.color = \"white\";\r\n        }\r\n        console.log(elementNum);\r\n      } // 콜백 끝\r\n    ); // 싱멀태그메이커 끝\r\n    fourPageBtn(page);\r\n    prevStartPageGroupDisplay(page);\r\n  } // for문 끝\r\n}\r\n// console.dir(currentPage.children)\r\n\r\n//board-list 추가\r\nconst makeContent = (i) => {\r\n  const content = document.createElement(\"div\");\r\n  content.innerHTML = `\r\n    <span>${i}</span>\r\n    <span>게시물 제목</span>\r\n    <span>작성자</span>\r\n    <span>2022.01.01</span>\r\n  `;\r\n  return content;\r\n};\r\n\r\nconst renderContent = (page) => {\r\n  while (boardList.hasChildNodes()) {\r\n    boardList.removeChild(boardList.lastChild);\r\n  }\r\n\r\n  for (\r\n    let i = (page - 1) * pagination.onePageData + 1;\r\n    i <= page * pagination.onePageData && pagination.totalDoc;\r\n    i++\r\n  ) {\r\n    boardList.appendChild(makeContent(i));\r\n  }\r\n};\r\n\r\n// async function allPaging(page) {\r\n//   currPageBtn(page);\r\n//   prevStartPageGroupDisplay(page);\r\n//   fourPageBtn(page);\r\n// }\r\n\r\n// allPaging(pagination.currentPage);\r\ncurrPageBtn(pagination.currentPage);\r\n\r\n// console.log(currentPage.children[0].dataset.num)\r\n\n\n//# sourceURL=webpack://05-01/./paging.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./paging.js");
/******/ 	
/******/ })()
;